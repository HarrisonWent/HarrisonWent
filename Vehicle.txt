Shader "Custom/Vehicle"
{
    Properties
    {
        _Color ("Color", Color) = (1,1,1,1)
        _MainTex ("Albedo (RGB)", 2D) = "white" {}

        _Damage("Damage", Range(0,1)) = 0.0
        _DamageTex("Damage Texture (RGB)", 2D) = "white" {}
        _DamageMask("Damage Mask (RGBA)", 2D) = "white" {}

        [HDR]
        _EmissionColour("Emission Colour", Color) = (1,1,1,1)
        _EmissionTex("Emission Texture (RGB)", 2D) = "black" {}

        _Normal("Normal", 2D) = "bump" {}
        _DetailNormal("Detail Normal", 2D) = "bump" {}
        _DetailStrength("Detail Normal Strength", Range(0,10)) = 1

        _Occlusion("Occlusion", 2D) = "white" {}
        _OcclusionStrength("Occlusion Strength", Range(0,10)) = 1

        _Glossiness("Smoothness", Range(0,1)) = 0.5

        [HDR]_ThermalColour("Thermal Color", Color) = (1,1,1,1)
        _AppliedThermal("Applied thermal", Range(0,1)) = 0.0


        _RimColor("Rim Color", Color) = (0.26, 0.19, 0.16, 0.0)
        _RimPower("Rim Power", Range(0.5, 8.0)) = 3.0

    }
    SubShader
    {
        Tags { "RenderType"="Opaque" }
        LOD 200

        CGPROGRAM
        // Physically based Standard lighting model, and enable shadows on all light types
        #pragma surface surf Standard fullforwardshadows

        //3.5 for more texture interpolators
        #pragma target 3.5

        sampler2D _MainTex;
        sampler2D _DamageTex;
        sampler2D _DamageMask;
        sampler2D _Occlusion;
        sampler2D _Normal;
        sampler2D _DetailNormal;
        sampler2D _EmissionTex;
        sampler2D _Smooth;

        struct Input
        {
            float2 uv_MainTex;
            float2 uv_DamageTex;
            float2 uv_Normal;
            float2 uv_DetailNormal;
            float2 uv_Occlusion;
            float2 uv_DamageMask;
            float2 uv_EmissionTex;
            float2 uv_Smooth;
            float3 viewDir;
        };

        half _Glossiness;
        half _DetailStrength;
        half _Damage;
        half _OcclusionStrength;
        half _AppliedThermal;

        float4 _RimColor;
        float _RimPower;

        fixed3 _Color;
        fixed3 _ThermalColour;
        fixed4 _EmissionColour;

        UNITY_INSTANCING_BUFFER_START(Props)
        UNITY_INSTANCING_BUFFER_END(Props)

        void surf (Input IN, inout SurfaceOutputStandard o)
        {
            fixed4 Occ = tex2D(_Occlusion, IN.uv_Occlusion);

            fixed3 c = tex2D (_MainTex, IN.uv_MainTex) * _Color;
            fixed3 D = tex2D(_DamageTex, IN.uv_DamageTex);
            fixed4 DM = tex2D(_DamageMask, IN.uv_DamageMask);

            //o.Albedo = ((c.rgb*(1-_AppliedThermal))+(Occ.rgb*_AppliedThermal)) * (1- (_Damage* DM.a)) + ((D.rgb * (_Damage * DM.a)));

            o.Albedo = ((c.rgb * (1 - _AppliedThermal)) + (_ThermalColour.rgb * _AppliedThermal)) * (1 - (_Damage * DM.a)) + ((D.rgb * (_Damage * DM.a)));

            o.Emission = tex2D(_EmissionTex, IN.uv_EmissionTex).rgb * _EmissionColour;
            o.Metallic = 0;
            o.Smoothness =  _Glossiness;

            //o.Alpha = c.a;

            o.Normal = UnpackNormal(tex2D(_Normal, IN.uv_Normal)) + (UnpackNormal(tex2D(_DetailNormal,IN.uv_DetailNormal))* _DetailStrength);
            
            o.Occlusion = lerp(1.0, Occ.rgb, _OcclusionStrength);

            //Rim lighting
            half rim = 1.0 - saturate(dot(normalize(IN.viewDir), o.Normal));
            o.Emission += _RimColor.rgb * pow(rim, _RimPower);
        }
        ENDCG
    }
    FallBack "Diffuse"
}
